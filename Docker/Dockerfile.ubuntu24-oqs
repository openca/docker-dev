# The DOCKER_IMAGE_VERSION definition is used by
# the scripts/gen-docker-image.sh to grab the
# Dockerfile version
#
# See Docker/config/CONTAINER_ENV_VARIABLES for
# the current value


# =====================
# Begin: Pre-Requisites
# =====================

# Argument for build only (Global across "FROM")
ARG DEV_BUILD

# Initial Setup
FROM openca.org/ubuntu24:latest

# Argument for build only ("FROM" section specific)
ARG DEV_BUILD

# Sets the ENV variables for OpenSSL compilation
# ENV LC_CTYPE            en_US.UTF-8
ARG LC_ALL     C

# Exports to runtime
ENV IDE_BUILD=${DEV_BUILD}
ENV GITHUB_ARCHIVE_TYPE=zip

# Build Directory
ENV PRJ_DEST_DIR=/opt/pqc

# ===========================
# Pre-Requisites Installation
# ===========================

# Prerequisites
RUN DEBIAN_FRONTEND=noninteractive \
    apt-get --yes install astyle cmake gcc \
    ninja-build libssl-dev \
    python3-pytest python3-pytest-xdist \
    unzip xsltproc \
    doxygen graphviz python3-yaml \
    valgrind

# ============
# OpenSSL 3.2+
# ============

# v3.2+ is needed for TLS and CMS support

ENV OPENSSL_BUILD_OPTIONS="\
    --prefix=${PRJ_DEST_DIR} -d -shared -no-asm \
    -g3 -ggdb -gdwarf-4 -fno-inline -O0 \
    -fno-omit-frame-pointer"

# Install OpenSSL
RUN DEBIAN_FRONTEND=noninteractive \
    curl https://codeload.github.com/openssl/openssl/zip/refs/heads/master --output "openssl-master.zip" && \
    unzip -q openssl-master.zip && \
    cd openssl-master && \
    ./config ${OPENSSL_BUILD_OPTIONS} && \
    make build_libs && make install_sw

# ======
# LibOQS
# ======

# Install LibOQS
ENV OQS_BUILD_OPTIONS="\
      -DCMAKE_INSTALL_PREFIX=${PRJ_DEST_DIR} \
      -DOQS_USE_OPENSSL=OFF \
	  -DBUILD_SHARED_LIBS=ON \
      -DOQS_BUILD_ONLY_LIB=OFF \
      -DOQS_DIST_BUILD=OFF \
      -DCMAKE_BUILD_TYPE=Debug"

RUN DEBIAN_FRONTEND=noninteractive \
    curl https://codeload.github.com/open-quantum-safe/liboqs/zip/refs/heads/main --output "liboqs-main.zip" && \
    unzip -q liboqs-main.zip && \
    cd liboqs-main && \
    mkdir build && cd build && \
    cmake ${OQS_BUILD_OPTIONS} -GNinja .. && \
    ninja && \
    ninja install

# ============
# OQS Provider
# ============

# Install OQS provider
ENV OQS_PROV_OPTIONS="\
    -DOPENSSL_ROOT_DIR=${PRJ_DEST_DIR} \
    -DCMAKE_BUILD_TYPE=Debug \
    -S . \
    -B _build"

RUN DEBIAN_FRONTEND=noninteractive \
    curl https://codeload.github.com/open-quantum-safe/oqs-provider/zip/refs/heads/main --output "oqs-provider-main.zip" && \
    unzip -q oqs-provider-main.zip && \
    cd oqs-provider-main && \
    liboqs_DIR=${PRJ_DEST_DIR} cmake ${OQS_PROV_OPTIONS} && \
    cmake --build _build && \
    cmake --install _build

# ================
# Finalize Section
# =================

# set up persisted workspace
RUN mkdir -p /workspace
WORKDIR /workspace

# Environment
ENV NODE_ENV=development

# Adds the PATH and LD_LIBRARY_PATH
# to the root's user bashrc
RUN DEBIAN_FRONTEND=noninteractive \
  echo >> ~/.bashrc \
  && echo "export PATH=${PRJ_DEST_DIR}/bin:$PATH" >> ~/.bashrc \
  && echo "export LD_LIBRARY_PATH=${PRJ_DEST_DIR}/lib:${PRJ_DEST_DIR}/lib64" >> ~/.bashrc \
  && echo >> ~/.bashrc

# Copies the OQS-enabled openssl config
RUN mkdir -p ${PRJ_DEST_DIR}/ssl
ADD openssl.cnf ${PRJ_DEST_DIR}/ssl

# ==========
# Final Note
# ==========

# Enjoy the PQC DEV environment!
# Dr. Pala <director@openca.org>

CMD ["/bin/bash"]
