# =====================
# Begin: Pre-Requisites
# =====================

# Argument for build only (Global across "FROM")
ARG DEV_BUILD

# Initial Setup
FROM ubuntu:24.04

# Argument for build only ("FROM" section specific)
ARG DEV_BUILD

# Sets the ENV variables for OpenSSL compilation
ENV LC_CTYPE=en_US.UTF-8
ENV LC_ALL=C
ENV LANGUAGE=C

# Exports to runtime
ENV IDE_BUILD=${DEV_BUILD}

# Update stuff
RUN DEBIAN_FRONTEND=noninteractive apt-get update --fix-missing

# Install missing development tools
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y --fix-missing \
    build-essential checkinstall libssl-dev libwolfssl-dev \
    yarn curl wget git gnupg nano vim htop unzip \
    default-mysql-client unzip automake autoconf libtool \
    libxml2-dev virtualenv python3 python3-pip python3-tabulate \
    cmake ninja-build python3-pytest python3-pytest-xdist \
    python3-jinja2 python3-yaml apt-utils \
    apt-transport-https curl wget uuid-dev \
    git git-secrets git-crypt git-repair git-review git-revise \
    bind9-dnsutils netcat-traditional arping 2ping ssh \
    gcc gdb lldb clang cppcheck clang-tidy clang-tools \
    libtool python3-venv astyle cmake gcc \
    ninja-build libssl-dev python3-pytest python3-pytest-xdist \
    unzip xsltproc doxygen graphviz python3-yaml valgrind \
    gdb gdb-doc gdb-x86-64* gdb-i686* 

# # =====================
# # Begin: NodeJS Section
# # =====================
# #
# # To manage the versions installed of NodeJS
# # we use NVM (Node Version Management) that
# # simplifies switching among versions.
# #

# # Node Temp Directory (we use it to save temp)
# # data (e.g., software compilation, etc)
RUN mkdir /tmp/node
ENV NODE_TMP /tmp/node

# Node Version Management
RUN mkdir /usr/local/nvm
ENV NVM_DIR /usr/local/nvm

# NOTE: The latest version (17.3.0) has some checks that
#       interfere with the compilation of the addon/ module.
#       Before upgrading, check out the compatibility of
#       the node-addon-api compatibility
#
#       ENV NODE_VERSION 17.3.0
#
# ENV NODE_VERSION 16.14.0
#
# UPDATE: In order to be able to run the genSdk inside the
#         container, we need to install a version supported
#         by sqlite3 module (see yarnpkg.com/package/sqlite3).
#
#         ENV NODE_VERSION 14.19.1 (lts/fermium)
#         
# ENV NODE_COMPILED_VERSION 14.19.1
ENV NODE_COMPILED_VERSION 16.14.0

# Install nvm with node and npm
ENV NVM_INST_VER v0.40.2
# ENV NVM_BASE_URL raw.githubusercontent.com/creationix/nvm
ENV NVM_BASE_URL raw.githubusercontent.com/nvm-sh/nvm/
RUN curl https://${NVM_BASE_URL}/${NVM_INST_VER}/install.sh | bash \
	&& . $NVM_DIR/nvm.sh \
	&& nvm install $NODE_COMPILED_VERSION \
	&& nvm alias default $NODE_COMPILED_VERSION \
	&& nvm use default

# Node Version Management
ENV NODE_PATH $NVM_DIR/v$NODE_COMPILED_VERSION/lib/node_modules
ENV PATH      $NVM_DIR/versions/node/v$NODE_COMPILED_VERSION/bin:$PATH

# Use NVM to switch to the new version
RUN DEBIAN_FRONTEND=noninteractive \
  cd /usr/local/nvm \
    && \. "$NVM_DIR/nvm.sh" \
    && \. "$NVM_DIR/bash_completion" \
    && nvm alias default $NODE_VERSION \
	&& nvm use default

# Install global dependencies via Yarn
RUN DEBIAN_FRONTEND=noninteractive \
    npm install -g typescript \
      ts-node nodemon mocha openapi-sdk-generator \
      pm2 nopt node-gyp

RUN echo '' >> ~/.bashrc && \
      echo 'alias python=python3' >> ~/.bashrc

# This enables downloading from the git repository
RUN apt-get -y install ssh && \
    mkdir -p /root/.ssh && \
    touch /root/.ssh/known_hosts && \
    ssh-keyscan github.com >> /root/.ssh/known_hosts

# =======================
# End: Finalize Section
# =======================

# set up persisted workspace
RUN mkdir -p /workspace
WORKDIR /workspace

# Environment
ENV NODE_ENV=DEV

# ==========
# Final Note
# ==========

# Enjoy the OpenCA DEV environment!
# Dr. Pala <director@openca.org>

CMD ["/bin/bash"]
